rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: each authenticated user may create/read/update/delete only their own document.
    // Admins (via custom claim) can read/update/delete any user document.
    match /users/{uid} {
      allow create: if request.auth != null && request.auth.uid == uid;
      // allow read/update/delete to the owner or to admins (either via custom claim or via an admins/{uid} document)
      allow read: if request.auth != null && (
        request.auth.uid == uid ||
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
      allow update, delete: if request.auth != null && (
        request.auth.uid == uid ||
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    // Admins collection: allow authenticated clients to read the list (so UI can check membership),
    // but only server-side/admin SDK or existing admins with proper claims should create/update/delete.
    match /admins/{adminId} {
      // allow authenticated clients to read the list (so UI can check membership)
      allow read: if request.auth != null;
      // allow create/update/delete only to admins. Note: the first admin must be created
      // manually via the Firebase Console or Admin SDK (to bootstrap the admins collection).
      allow create, update, delete: if request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    // Bookings: anyone can read; only authenticated users can create bookings.
    // Only admins (custom claim) can update/delete bookings (approve/cancel).
    match /bookings/{bookingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    // Recurring bookings (admin-only management)
    match /recurring_bookings/{recurringId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    // Products, championships, advertisements, training_cards: reads are public,
    // writes are restricted to admins only.
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    match /championships/{championshipId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    match /advertisements/{advertisementId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    match /training_cards/{trainingId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    // Fallback: deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
